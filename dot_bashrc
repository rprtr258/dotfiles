# If not running interactively, don't do anything
case $- in
  *i*) ;;
    *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# unlimited history
HISTSIZE=
HISTFILESIZE=

# append to the history file, don't overwrite it
shopt -s histappend

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
  if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	  # We have color support; assume it's compliant with Ecma-48
	  # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	  # a case would tend to support setf rather than setaf.)
	  color_prompt=yes
  else
	  color_prompt=
  fi
fi

function git-branch {
  echo $(git symbolic-ref HEAD 2> /dev/null | sed -e 's?refs/heads/??g')
}

function prompt_command {
  local exitstatus="$?";
  local USER="\u";
  local HOSTNAME="\h";
  local PROMPT='\n\$ ';
  local BOLD="\[\033[1m\]";
  local RED='\[\e[91m\]';
  local GREEN='\[\033[01;92m\]';
  local BLUE='\[\033[01;34m\]';
  local CYAN="\[\e[36;1m\]";
  local WHITE='\[\033[00m\]';
  local OFF="\[\033[m\]";
  branch=$(git-branch);
  changes=$(git status -s 2> /dev/null | wc -l | sed -e 's/ *//');
  if [ "${changes}" -eq 0 ]; then
      dirty="";
  else
      dirty="*";
  fi;
  if [ "${branch}" ]; then
      branch="(${branch}${dirty})";
  fi;
  if [ ${exitstatus} -eq 0 ]; then
      EXITCOLOR="${WHITE}";
  else
      EXITCOLOR="${RED}";
  fi;
  k8s_ctx=$(kubectx --current);
  k8s_ns=$(kubens --current);
  k8s="(k8s://${BLUE}${k8s_ctx}${OFF}/${CYAN}${k8s_ns}${OFF})";
  PS1="${VIRTUAL_ENV_PROMPT}${GREEN}${USER}@${HOSTNAME}${OFF}${k8s}:${BLUE}\w${RED}${branch}${OFF}[${EXITCOLOR}${exitstatus}${OFF}]${PROMPT}";
  PS2="${BOLD}>${OFF} ";
  title=$(basename "$PWD");
  echo -n -e "\033]0;${title}\007"
}
PROMPT_COMMAND=prompt_command

# enable color support of ls and also add handy aliases
eval $(dircolors -b ~/.bash_colors)

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# ALIASES
alias dirs="dirs -v"
alias ls='ls --color=auto'
alias ll='ls -lAFh'
alias la='ls -AF'
alias l='ls -CF'
alias clip='xclip -selection clipboard'
alias mv='mv -i'
alias cp='cp -i'
alias dps='docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"'
alias ssh="TERM=xterm-256color $(which ssh)"
alias bat='bat --style=numbers,rule,header'
alias k='kubectl'
alias pstree='pstree -hnpsT'
alias vault='VAULT_ADDR=https://vault.s.o3.ru:8200 vault'
alias vim='nvim'

alias gs='git status'
alias ga='git add'
function gm {
  local BRANCH="$(git-branch)"
  git commit -m "$BRANCH: $*"
}
export GIT_EXTERNAL_DIFF=difft
alias gd='git diff'
alias ga='git add'
alias gs='git status'
alias gt='git log --graph --decorate=full --oneline'
alias git-prune="git branch --merged master | grep -v '^[ *]*master$' | xargs git branch -d"
function gpu {
  branch=$(git-branch)
  git push -u origin $branch
}

function _completion {
  chezmoi completion bash;
  gh completion -s bash;
  gopass completion bash;
  hugo completion bash;
  itc completion bash;
  jj util completion bash;
  kubectl completion bash;
  mani completion bash;
  pm completion bash;
  pm2 completion;
  steampipe completion bash;
  echo "complete -C $(which vault) vault";
  echo "complete -C x x";
  zellij setup --generate-completion bash;
}
#_completion > ~/.bash_completion
source ~/.bash_completion
# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

ssh-add ~/.ssh/{github,gitlab,infra,vps_root,asus} 2>/dev/null

eval "$(fzf --bash)"

