# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# unlimited history
HISTSIZE=
HISTFILESIZE=

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

function git-branch {
    echo $(git symbolic-ref HEAD 2> /dev/null | sed -e 's?refs/heads/??g')
}

function prompt_command {
    exitstatus="$?"
    USER="\u"
    HOSTNAME="\h"
    PROMPT='\n\$ '

    BOLD="\[\033[1m\]"
    RED='\[\e[91m\]'
    GREEN='\[\033[01;32m\]'
    BLUE='\[\033[01;34m\]'
    PURPLE="\[\e[35;1m\]"
    CYAN="\[\e[36;1m\]"
    WHITE='\[\033[00m\]'
    OFF="\[\033[m\]"

    branch=$(git-branch)
    changes=$(git status -s 2> /dev/null | wc -l | sed -e 's/ *//')
    if [ ${changes} -eq 0 ]; then
      dirty=""
    else
      dirty="*"
    fi
    if [ ${branch} ]; then
        branch="(${branch}${dirty})"
    fi

    if [ ${exitstatus} -eq 0 ]; then
      EXITCOLOR="${WHITE}"
    else
      EXITCOLOR="${RED}"
    fi

    PS1="${GREEN}${USER}@${HOSTNAME}${OFF}:${BLUE}\w${RED}${branch}${OFF}[${EXITCOLOR}${exitstatus}${OFF}]${PROMPT}"
    PS2="${BOLD}>${OFF} "
    
    dir=$(pwd)
    title=$(basename "${dir}")
    echo -n -e "\033]0;${title}\007"
}

PROMPT_COMMAND=prompt_command

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    #alias grep='grep --color=auto'
    #alias fgrep='fgrep --color=auto'
    #alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# ALIASES
alias dirs="dirs -v"
alias ll='ls -lAF'
alias la='ls -AF'
alias l='ls -CF'
alias clip='xclip -selection clipboard'
alias mv='mv -i'
alias cp='cp -i'
alias gs='git status'
alias ga='git add'
alias gm='git commit -m'
alias gd='git diff'
alias gt='git log --graph --decorate=full --oneline --all'
alias git-prune="git branch --merged master | grep -v '^[ *]*master$' | xargs git branch -d"
alias pass="keepassxc-cli clip /mnt/hdd/keepass/passwords.kdbx -k /mnt/hdd/keepass/pass_db.key --no-password"
alias dps='docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Ports}}"'

function gpu {
    branch=$(git-branch)
    git push -u origin $branch
}

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

ssh-add ~/.ssh/github 2>/dev/null

. "$HOME/.cargo/env"
eval $(dircolors -b ~/.bash_colors)

export PATH=$PATH:/usr/local/go/bin
export PATH=$PATH:~/go/bin
export PATH=$PATH:/var/lib/flatpak/exports/bin/

###-begin-pm2-completion-###
### credits to npm for the completion file model
#
# Installation: pm2 completion >> ~/.bashrc  (or ~/.zshrc)
#

COMP_WORDBREAKS=${COMP_WORDBREAKS/=/}
COMP_WORDBREAKS=${COMP_WORDBREAKS/@/}
export COMP_WORDBREAKS

if type complete &>/dev/null; then
  _pm2_completion () {
    local si="$IFS"
    IFS=$'\n' COMPREPLY=($(COMP_CWORD="$COMP_CWORD" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           pm2 completion -- "${COMP_WORDS[@]}" \
                           2>/dev/null)) || return $?
    IFS="$si"
  }
  complete -o default -F _pm2_completion pm2
elif type compctl &>/dev/null; then
  _pm2_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       pm2 completion -- "${words[@]}" \
                       2>/dev/null)) || return $?
    IFS="$si"
  }
  compctl -K _pm2_completion + -f + pm2
fi
###-end-pm2-completion-###

_just() {
    local i cur prev opts cmds
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    cmd=""
    opts=""

    for i in ${COMP_WORDS[@]}
    do
        case "${i}" in
            "$1")
                cmd="just"
                ;;
            
            *)
                ;;
        esac
    done

    case "${cmd}" in
        just)
            opts=" -q -u -v -e -l -h -V -f -d -c -s  --check --dry-run --highlight --no-dotenv --no-highlight --quiet --shell-command --clear-shell-args --unsorted --unstable --verbose --changelog --choose --dump --edit --evaluate --fmt --init --list --summary --variables --help --version --chooser --color --dump-format --list-heading --list-prefix --justfile --set --shell --shell-arg --working-directory --command --completions --show --dotenv-filename --dotenv-path  <ARGUMENTS>... "
                if [[ ${cur} == -* ]] ; then
                    COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
                    return 0
                elif [[ ${COMP_CWORD} -eq 1 ]]; then
                    local recipes=$(just --summary --color never 2> /dev/null)
                    if [[ $? -eq 0 ]]; then
                        COMPREPLY=( $(compgen -W "${recipes}" -- "${cur}") )
                        return 0
                    fi
                fi
            case "${prev}" in
                
                --chooser)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --color)
                    COMPREPLY=($(compgen -W "auto always never" -- "${cur}"))
                    return 0
                    ;;
                --dump-format)
                    COMPREPLY=($(compgen -W "just json" -- "${cur}"))
                    return 0
                    ;;
                --list-heading)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --list-prefix)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --justfile)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                    -f)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --set)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --shell)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --shell-arg)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --working-directory)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                    -d)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --command)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                    -c)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --completions)
                    COMPREPLY=($(compgen -W "zsh bash fish powershell elvish" -- "${cur}"))
                    return 0
                    ;;
                --show)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                    -s)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --dotenv-filename)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                --dotenv-path)
                    COMPREPLY=($(compgen -f "${cur}"))
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- "${cur}") )
            return 0
            ;;
        
    esac
}

complete -F _just -o bashdefault -o default just
# bash completion V2 for hugo                                 -*- shell-script -*-

__hugo_debug()
{
    if [[ -n ${BASH_COMP_DEBUG_FILE:-} ]]; then
        echo "$*" >> "${BASH_COMP_DEBUG_FILE}"
    fi
}

# Macs have bash3 for which the bash-completion package doesn't include
# _init_completion. This is a minimal version of that function.
__hugo_init_completion()
{
    COMPREPLY=()
    _get_comp_words_by_ref "$@" cur prev words cword
}

# This function calls the hugo program to obtain the completion
# results and the directive.  It fills the 'out' and 'directive' vars.
__hugo_get_completion_results() {
    local requestComp lastParam lastChar args

    # Prepare the command to request completions for the program.
    # Calling ${words[0]} instead of directly hugo allows to handle aliases
    args=("${words[@]:1}")
    requestComp="${words[0]} __complete ${args[*]}"

    lastParam=${words[$((${#words[@]}-1))]}
    lastChar=${lastParam:$((${#lastParam}-1)):1}
    __hugo_debug "lastParam ${lastParam}, lastChar ${lastChar}"

    if [ -z "${cur}" ] && [ "${lastChar}" != "=" ]; then
        # If the last parameter is complete (there is a space following it)
        # We add an extra empty parameter so we can indicate this to the go method.
        __hugo_debug "Adding extra empty parameter"
        requestComp="${requestComp} ''"
    fi

    # When completing a flag with an = (e.g., hugo -n=<TAB>)
    # bash focuses on the part after the =, so we need to remove
    # the flag part from $cur
    if [[ "${cur}" == -*=* ]]; then
        cur="${cur#*=}"
    fi

    __hugo_debug "Calling ${requestComp}"
    # Use eval to handle any environment variables and such
    out=$(eval "${requestComp}" 2>/dev/null)

    # Extract the directive integer at the very end of the output following a colon (:)
    directive=${out##*:}
    # Remove the directive
    out=${out%:*}
    if [ "${directive}" = "${out}" ]; then
        # There is not directive specified
        directive=0
    fi
    __hugo_debug "The completion directive is: ${directive}"
    __hugo_debug "The completions are: ${out}"
}

__hugo_process_completion_results() {
    local shellCompDirectiveError=1
    local shellCompDirectiveNoSpace=2
    local shellCompDirectiveNoFileComp=4
    local shellCompDirectiveFilterFileExt=8
    local shellCompDirectiveFilterDirs=16

    if [ $((directive & shellCompDirectiveError)) -ne 0 ]; then
        # Error code.  No completion.
        __hugo_debug "Received error from custom completion go code"
        return
    else
        if [ $((directive & shellCompDirectiveNoSpace)) -ne 0 ]; then
            if [[ $(type -t compopt) = "builtin" ]]; then
                __hugo_debug "Activating no space"
                compopt -o nospace
            else
                __hugo_debug "No space directive not supported in this version of bash"
            fi
        fi
        if [ $((directive & shellCompDirectiveNoFileComp)) -ne 0 ]; then
            if [[ $(type -t compopt) = "builtin" ]]; then
                __hugo_debug "Activating no file completion"
                compopt +o default
            else
                __hugo_debug "No file completion directive not supported in this version of bash"
            fi
        fi
    fi

    # Separate activeHelp from normal completions
    local completions=()
    local activeHelp=()
    __hugo_extract_activeHelp

    if [ $((directive & shellCompDirectiveFilterFileExt)) -ne 0 ]; then
        # File extension filtering
        local fullFilter filter filteringCmd

        # Do not use quotes around the $completions variable or else newline
        # characters will be kept.
        for filter in ${completions[*]}; do
            fullFilter+="$filter|"
        done

        filteringCmd="_filedir $fullFilter"
        __hugo_debug "File filtering command: $filteringCmd"
        $filteringCmd
    elif [ $((directive & shellCompDirectiveFilterDirs)) -ne 0 ]; then
        # File completion for directories only

        # Use printf to strip any trailing newline
        local subdir
        subdir=$(printf "%s" "${completions[0]}")
        if [ -n "$subdir" ]; then
            __hugo_debug "Listing directories in $subdir"
            pushd "$subdir" >/dev/null 2>&1 && _filedir -d && popd >/dev/null 2>&1 || return
        else
            __hugo_debug "Listing directories in ."
            _filedir -d
        fi
    else
        __hugo_handle_completion_types
    fi

    __hugo_handle_special_char "$cur" :
    __hugo_handle_special_char "$cur" =

    # Print the activeHelp statements before we finish
    if [ ${#activeHelp} -ne 0 ]; then
        printf "\n";
        printf "%s\n" "${activeHelp[@]}"
        printf "\n"

        # The prompt format is only available from bash 4.4.
        # We test if it is available before using it.
        if (x=${PS1@P}) 2> /dev/null; then
            printf "%s" "${PS1@P}${COMP_LINE[@]}"
        else
            # Can't print the prompt.  Just print the
            # text the user had typed, it is workable enough.
            printf "%s" "${COMP_LINE[@]}"
        fi
    fi
}

# Separate activeHelp lines from real completions.
# Fills the $activeHelp and $completions arrays.
__hugo_extract_activeHelp() {
    local activeHelpMarker="_activeHelp_ "
    local endIndex=${#activeHelpMarker}

    while IFS='' read -r comp; do
        if [ "${comp:0:endIndex}" = "$activeHelpMarker" ]; then
            comp=${comp:endIndex}
            __hugo_debug "ActiveHelp found: $comp"
            if [ -n "$comp" ]; then
                activeHelp+=("$comp")
            fi
        else
            # Not an activeHelp line but a normal completion
            completions+=("$comp")
        fi
    done < <(printf "%s\n" "${out}")
}

__hugo_handle_completion_types() {
    __hugo_debug "__hugo_handle_completion_types: COMP_TYPE is $COMP_TYPE"

    case $COMP_TYPE in
    37|42)
        # Type: menu-complete/menu-complete-backward and insert-completions
        # If the user requested inserting one completion at a time, or all
        # completions at once on the command-line we must remove the descriptions.
        # https://github.com/spf13/cobra/issues/1508
        local tab=$'\t' comp
        while IFS='' read -r comp; do
            [[ -z $comp ]] && continue
            # Strip any description
            comp=${comp%%$tab*}
            # Only consider the completions that match
            if [[ $comp == "$cur"* ]]; then
                COMPREPLY+=("$comp")
            fi
        done < <(printf "%s\n" "${completions[@]}")
        ;;

    *)
        # Type: complete (normal completion)
        __hugo_handle_standard_completion_case
        ;;
    esac
}

__hugo_handle_standard_completion_case() {
    local tab=$'\t' comp

    # Short circuit to optimize if we don't have descriptions
    if [[ "${completions[*]}" != *$tab* ]]; then
        IFS=$'\n' read -ra COMPREPLY -d '' < <(compgen -W "${completions[*]}" -- "$cur")
        return 0
    fi

    local longest=0
    local compline
    # Look for the longest completion so that we can format things nicely
    while IFS='' read -r compline; do
        [[ -z $compline ]] && continue
        # Strip any description before checking the length
        comp=${compline%%$tab*}
        # Only consider the completions that match
        [[ $comp == "$cur"* ]] || continue
        COMPREPLY+=("$compline")
        if ((${#comp}>longest)); then
            longest=${#comp}
        fi
    done < <(printf "%s\n" "${completions[@]}")

    # If there is a single completion left, remove the description text
    if [ ${#COMPREPLY[*]} -eq 1 ]; then
        __hugo_debug "COMPREPLY[0]: ${COMPREPLY[0]}"
        comp="${COMPREPLY[0]%%$tab*}"
        __hugo_debug "Removed description from single completion, which is now: ${comp}"
        COMPREPLY[0]=$comp
    else # Format the descriptions
        __hugo_format_comp_descriptions $longest
    fi
}

__hugo_handle_special_char()
{
    local comp="$1"
    local char=$2
    if [[ "$comp" == *${char}* && "$COMP_WORDBREAKS" == *${char}* ]]; then
        local word=${comp%"${comp##*${char}}"}
        local idx=${#COMPREPLY[*]}
        while [[ $((--idx)) -ge 0 ]]; do
            COMPREPLY[$idx]=${COMPREPLY[$idx]#"$word"}
        done
    fi
}

__hugo_format_comp_descriptions()
{
    local tab=$'\t'
    local comp desc maxdesclength
    local longest=$1

    local i ci
    for ci in ${!COMPREPLY[*]}; do
        comp=${COMPREPLY[ci]}
        # Properly format the description string which follows a tab character if there is one
        if [[ "$comp" == *$tab* ]]; then
            __hugo_debug "Original comp: $comp"
            desc=${comp#*$tab}
            comp=${comp%%$tab*}

            # $COLUMNS stores the current shell width.
            # Remove an extra 4 because we add 2 spaces and 2 parentheses.
            maxdesclength=$(( COLUMNS - longest - 4 ))

            # Make sure we can fit a description of at least 8 characters
            # if we are to align the descriptions.
            if [[ $maxdesclength -gt 8 ]]; then
                # Add the proper number of spaces to align the descriptions
                for ((i = ${#comp} ; i < longest ; i++)); do
                    comp+=" "
                done
            else
                # Don't pad the descriptions so we can fit more text after the completion
                maxdesclength=$(( COLUMNS - ${#comp} - 4 ))
            fi

            # If there is enough space for any description text,
            # truncate the descriptions that are too long for the shell width
            if [ $maxdesclength -gt 0 ]; then
                if [ ${#desc} -gt $maxdesclength ]; then
                    desc=${desc:0:$(( maxdesclength - 1 ))}
                    desc+="…"
                fi
                comp+="  ($desc)"
            fi
            COMPREPLY[ci]=$comp
            __hugo_debug "Final comp: $comp"
        fi
    done
}

__start_hugo()
{
    local cur prev words cword split

    COMPREPLY=()

    # Call _init_completion from the bash-completion package
    # to prepare the arguments properly
    if declare -F _init_completion >/dev/null 2>&1; then
        _init_completion -n "=:" || return
    else
        __hugo_init_completion -n "=:" || return
    fi

    __hugo_debug
    __hugo_debug "========= starting completion logic =========="
    __hugo_debug "cur is ${cur}, words[*] is ${words[*]}, #words[@] is ${#words[@]}, cword is $cword"

    # The user could have moved the cursor backwards on the command-line.
    # We need to trigger completion from the $cword location, so we need
    # to truncate the command-line ($words) up to the $cword location.
    words=("${words[@]:0:$cword+1}")
    __hugo_debug "Truncated words[*]: ${words[*]},"

    local out directive
    __hugo_get_completion_results
    __hugo_process_completion_results
}

if [[ $(type -t compopt) = "builtin" ]]; then
    complete -o default -F __start_hugo hugo
else
    complete -o default -o nospace -F __start_hugo hugo
fi

# ex: ts=4 sw=4 et filetype=sh
# bash completion for sake                                 -*- shell-script -*-

__sake_debug()
{
    if [[ -n ${BASH_COMP_DEBUG_FILE:-} ]]; then
        echo "$*" >> "${BASH_COMP_DEBUG_FILE}"
    fi
}

# Homebrew on Macs have version 1.3 of bash-completion which doesn't include
# _init_completion. This is a very minimal version of that function.
__sake_init_completion()
{
    COMPREPLY=()
    _get_comp_words_by_ref "$@" cur prev words cword
}

__sake_index_of_word()
{
    local w word=$1
    shift
    index=0
    for w in "$@"; do
        [[ $w = "$word" ]] && return
        index=$((index+1))
    done
    index=-1
}

__sake_contains_word()
{
    local w word=$1; shift
    for w in "$@"; do
        [[ $w = "$word" ]] && return
    done
    return 1
}

__sake_handle_go_custom_completion()
{
    __sake_debug "${FUNCNAME[0]}: cur is ${cur}, words[*] is ${words[*]}, #words[@] is ${#words[@]}"

    local shellCompDirectiveError=1
    local shellCompDirectiveNoSpace=2
    local shellCompDirectiveNoFileComp=4
    local shellCompDirectiveFilterFileExt=8
    local shellCompDirectiveFilterDirs=16

    local out requestComp lastParam lastChar comp directive args

    # Prepare the command to request completions for the program.
    # Calling ${words[0]} instead of directly sake allows to handle aliases
    args=("${words[@]:1}")
    # Disable ActiveHelp which is not supported for bash completion v1
    requestComp="SAKE_ACTIVE_HELP=0 ${words[0]} __completeNoDesc ${args[*]}"

    lastParam=${words[$((${#words[@]}-1))]}
    lastChar=${lastParam:$((${#lastParam}-1)):1}
    __sake_debug "${FUNCNAME[0]}: lastParam ${lastParam}, lastChar ${lastChar}"

    if [ -z "${cur}" ] && [ "${lastChar}" != "=" ]; then
        # If the last parameter is complete (there is a space following it)
        # We add an extra empty parameter so we can indicate this to the go method.
        __sake_debug "${FUNCNAME[0]}: Adding extra empty parameter"
        requestComp="${requestComp} \"\""
    fi

    __sake_debug "${FUNCNAME[0]}: calling ${requestComp}"
    # Use eval to handle any environment variables and such
    out=$(eval "${requestComp}" 2>/dev/null)

    # Extract the directive integer at the very end of the output following a colon (:)
    directive=${out##*:}
    # Remove the directive
    out=${out%:*}
    if [ "${directive}" = "${out}" ]; then
        # There is not directive specified
        directive=0
    fi
    __sake_debug "${FUNCNAME[0]}: the completion directive is: ${directive}"
    __sake_debug "${FUNCNAME[0]}: the completions are: ${out}"

    if [ $((directive & shellCompDirectiveError)) -ne 0 ]; then
        # Error code.  No completion.
        __sake_debug "${FUNCNAME[0]}: received error from custom completion go code"
        return
    else
        if [ $((directive & shellCompDirectiveNoSpace)) -ne 0 ]; then
            if [[ $(type -t compopt) = "builtin" ]]; then
                __sake_debug "${FUNCNAME[0]}: activating no space"
                compopt -o nospace
            fi
        fi
        if [ $((directive & shellCompDirectiveNoFileComp)) -ne 0 ]; then
            if [[ $(type -t compopt) = "builtin" ]]; then
                __sake_debug "${FUNCNAME[0]}: activating no file completion"
                compopt +o default
            fi
        fi
    fi

    if [ $((directive & shellCompDirectiveFilterFileExt)) -ne 0 ]; then
        # File extension filtering
        local fullFilter filter filteringCmd
        # Do not use quotes around the $out variable or else newline
        # characters will be kept.
        for filter in ${out}; do
            fullFilter+="$filter|"
        done

        filteringCmd="_filedir $fullFilter"
        __sake_debug "File filtering command: $filteringCmd"
        $filteringCmd
    elif [ $((directive & shellCompDirectiveFilterDirs)) -ne 0 ]; then
        # File completion for directories only
        local subdir
        # Use printf to strip any trailing newline
        subdir=$(printf "%s" "${out}")
        if [ -n "$subdir" ]; then
            __sake_debug "Listing directories in $subdir"
            __sake_handle_subdirs_in_dir_flag "$subdir"
        else
            __sake_debug "Listing directories in ."
            _filedir -d
        fi
    else
        while IFS='' read -r comp; do
            COMPREPLY+=("$comp")
        done < <(compgen -W "${out}" -- "$cur")
    fi
}

__sake_handle_reply()
{
    __sake_debug "${FUNCNAME[0]}"
    local comp
    case $cur in
        -*)
            if [[ $(type -t compopt) = "builtin" ]]; then
                compopt -o nospace
            fi
            local allflags
            if [ ${#must_have_one_flag[@]} -ne 0 ]; then
                allflags=("${must_have_one_flag[@]}")
            else
                allflags=("${flags[*]} ${two_word_flags[*]}")
            fi
            while IFS='' read -r comp; do
                COMPREPLY+=("$comp")
            done < <(compgen -W "${allflags[*]}" -- "$cur")
            if [[ $(type -t compopt) = "builtin" ]]; then
                [[ "${COMPREPLY[0]}" == *= ]] || compopt +o nospace
            fi

            # complete after --flag=abc
            if [[ $cur == *=* ]]; then
                if [[ $(type -t compopt) = "builtin" ]]; then
                    compopt +o nospace
                fi

                local index flag
                flag="${cur%=*}"
                __sake_index_of_word "${flag}" "${flags_with_completion[@]}"
                COMPREPLY=()
                if [[ ${index} -ge 0 ]]; then
                    PREFIX=""
                    cur="${cur#*=}"
                    ${flags_completion[${index}]}
                    if [ -n "${ZSH_VERSION:-}" ]; then
                        # zsh completion needs --flag= prefix
                        eval "COMPREPLY=( \"\${COMPREPLY[@]/#/${flag}=}\" )"
                    fi
                fi
            fi

            if [[ -z "${flag_parsing_disabled}" ]]; then
                # If flag parsing is enabled, we have completed the flags and can return.
                # If flag parsing is disabled, we may not know all (or any) of the flags, so we fallthrough
                # to possibly call handle_go_custom_completion.
                return 0;
            fi
            ;;
    esac

    # check if we are handling a flag with special work handling
    local index
    __sake_index_of_word "${prev}" "${flags_with_completion[@]}"
    if [[ ${index} -ge 0 ]]; then
        ${flags_completion[${index}]}
        return
    fi

    # we are parsing a flag and don't have a special handler, no completion
    if [[ ${cur} != "${words[cword]}" ]]; then
        return
    fi

    local completions
    completions=("${commands[@]}")
    if [[ ${#must_have_one_noun[@]} -ne 0 ]]; then
        completions+=("${must_have_one_noun[@]}")
    elif [[ -n "${has_completion_function}" ]]; then
        # if a go completion function is provided, defer to that function
        __sake_handle_go_custom_completion
    fi
    if [[ ${#must_have_one_flag[@]} -ne 0 ]]; then
        completions+=("${must_have_one_flag[@]}")
    fi
    while IFS='' read -r comp; do
        COMPREPLY+=("$comp")
    done < <(compgen -W "${completions[*]}" -- "$cur")

    if [[ ${#COMPREPLY[@]} -eq 0 && ${#noun_aliases[@]} -gt 0 && ${#must_have_one_noun[@]} -ne 0 ]]; then
        while IFS='' read -r comp; do
            COMPREPLY+=("$comp")
        done < <(compgen -W "${noun_aliases[*]}" -- "$cur")
    fi

    if [[ ${#COMPREPLY[@]} -eq 0 ]]; then
        if declare -F __sake_custom_func >/dev/null; then
            # try command name qualified custom func
            __sake_custom_func
        else
            # otherwise fall back to unqualified for compatibility
            declare -F __custom_func >/dev/null && __custom_func
        fi
    fi

    # available in bash-completion >= 2, not always present on macOS
    if declare -F __ltrim_colon_completions >/dev/null; then
        __ltrim_colon_completions "$cur"
    fi

    # If there is only 1 completion and it is a flag with an = it will be completed
    # but we don't want a space after the =
    if [[ "${#COMPREPLY[@]}" -eq "1" ]] && [[ $(type -t compopt) = "builtin" ]] && [[ "${COMPREPLY[0]}" == --*= ]]; then
       compopt -o nospace
    fi
}

# The arguments should be in the form "ext1|ext2|extn"
__sake_handle_filename_extension_flag()
{
    local ext="$1"
    _filedir "@(${ext})"
}

__sake_handle_subdirs_in_dir_flag()
{
    local dir="$1"
    pushd "${dir}" >/dev/null 2>&1 && _filedir -d && popd >/dev/null 2>&1 || return
}

__sake_handle_flag()
{
    __sake_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"

    # if a command required a flag, and we found it, unset must_have_one_flag()
    local flagname=${words[c]}
    local flagvalue=""
    # if the word contained an =
    if [[ ${words[c]} == *"="* ]]; then
        flagvalue=${flagname#*=} # take in as flagvalue after the =
        flagname=${flagname%=*} # strip everything after the =
        flagname="${flagname}=" # but put the = back
    fi
    __sake_debug "${FUNCNAME[0]}: looking for ${flagname}"
    if __sake_contains_word "${flagname}" "${must_have_one_flag[@]}"; then
        must_have_one_flag=()
    fi

    # if you set a flag which only applies to this command, don't show subcommands
    if __sake_contains_word "${flagname}" "${local_nonpersistent_flags[@]}"; then
      commands=()
    fi

    # keep flag value with flagname as flaghash
    # flaghash variable is an associative array which is only supported in bash > 3.
    if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
        if [ -n "${flagvalue}" ] ; then
            flaghash[${flagname}]=${flagvalue}
        elif [ -n "${words[ $((c+1)) ]}" ] ; then
            flaghash[${flagname}]=${words[ $((c+1)) ]}
        else
            flaghash[${flagname}]="true" # pad "true" for bool flag
        fi
    fi

    # skip the argument to a two word flag
    if [[ ${words[c]} != *"="* ]] && __sake_contains_word "${words[c]}" "${two_word_flags[@]}"; then
        __sake_debug "${FUNCNAME[0]}: found a flag ${words[c]}, skip the next argument"
        c=$((c+1))
        # if we are looking for a flags value, don't show commands
        if [[ $c -eq $cword ]]; then
            commands=()
        fi
    fi

    c=$((c+1))

}

__sake_handle_noun()
{
    __sake_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"

    if __sake_contains_word "${words[c]}" "${must_have_one_noun[@]}"; then
        must_have_one_noun=()
    elif __sake_contains_word "${words[c]}" "${noun_aliases[@]}"; then
        must_have_one_noun=()
    fi

    nouns+=("${words[c]}")
    c=$((c+1))
}

__sake_handle_command()
{
    __sake_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"

    local next_command
    if [[ -n ${last_command} ]]; then
        next_command="_${last_command}_${words[c]//:/__}"
    else
        if [[ $c -eq 0 ]]; then
            next_command="_sake_root_command"
        else
            next_command="_${words[c]//:/__}"
        fi
    fi
    c=$((c+1))
    __sake_debug "${FUNCNAME[0]}: looking for ${next_command}"
    declare -F "$next_command" >/dev/null && $next_command
}

__sake_handle_word()
{
    if [[ $c -ge $cword ]]; then
        __sake_handle_reply
        return
    fi
    __sake_debug "${FUNCNAME[0]}: c is $c words[c] is ${words[c]}"
    if [[ "${words[c]}" == -* ]]; then
        __sake_handle_flag
    elif __sake_contains_word "${words[c]}" "${commands[@]}"; then
        __sake_handle_command
    elif [[ $c -eq 0 ]]; then
        __sake_handle_command
    elif __sake_contains_word "${words[c]}" "${command_aliases[@]}"; then
        # aliashash variable is an associative array which is only supported in bash > 3.
        if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
            words[c]=${aliashash[${words[c]}]}
            __sake_handle_command
        else
            __sake_handle_noun
        fi
    else
        __sake_handle_noun
    fi
    __sake_handle_word
}

_sake_check()
{
    last_command="sake_check"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--config=")
    two_word_flags+=("--config")
    two_word_flags+=("-c")
    flags+=("--no-color")
    flags+=("--ssh-config=")
    two_word_flags+=("--ssh-config")
    two_word_flags+=("-U")
    flags+=("--user-config=")
    two_word_flags+=("--user-config")
    two_word_flags+=("-u")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_sake_completion()
{
    last_command="sake_completion"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--help")
    flags+=("-h")
    local_nonpersistent_flags+=("--help")
    local_nonpersistent_flags+=("-h")
    flags+=("--config=")
    two_word_flags+=("--config")
    two_word_flags+=("-c")
    flags+=("--no-color")
    flags+=("--ssh-config=")
    two_word_flags+=("--ssh-config")
    two_word_flags+=("-U")
    flags+=("--user-config=")
    two_word_flags+=("--user-config")
    two_word_flags+=("-u")

    must_have_one_flag=()
    must_have_one_noun=()
    must_have_one_noun+=("bash")
    must_have_one_noun+=("fish")
    must_have_one_noun+=("powershell")
    must_have_one_noun+=("zsh")
    noun_aliases=()
}

_sake_describe_servers()
{
    last_command="sake_describe_servers"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--edit")
    flags+=("-e")
    local_nonpersistent_flags+=("--edit")
    local_nonpersistent_flags+=("-e")
    flags+=("--invert")
    flags+=("-v")
    local_nonpersistent_flags+=("--invert")
    local_nonpersistent_flags+=("-v")
    flags+=("--regex=")
    two_word_flags+=("--regex")
    two_word_flags+=("-r")
    local_nonpersistent_flags+=("--regex")
    local_nonpersistent_flags+=("--regex=")
    local_nonpersistent_flags+=("-r")
    flags+=("--tags=")
    two_word_flags+=("--tags")
    flags_with_completion+=("--tags")
    flags_completion+=("__sake_handle_go_custom_completion")
    two_word_flags+=("-t")
    flags_with_completion+=("-t")
    flags_completion+=("__sake_handle_go_custom_completion")
    local_nonpersistent_flags+=("--tags")
    local_nonpersistent_flags+=("--tags=")
    local_nonpersistent_flags+=("-t")
    flags+=("--config=")
    two_word_flags+=("--config")
    two_word_flags+=("-c")
    flags+=("--no-color")
    flags+=("--ssh-config=")
    two_word_flags+=("--ssh-config")
    two_word_flags+=("-U")
    flags+=("--user-config=")
    two_word_flags+=("--user-config")
    two_word_flags+=("-u")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_sake_describe_specs()
{
    last_command="sake_describe_specs"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--edit")
    flags+=("-e")
    local_nonpersistent_flags+=("--edit")
    local_nonpersistent_flags+=("-e")
    flags+=("--config=")
    two_word_flags+=("--config")
    two_word_flags+=("-c")
    flags+=("--no-color")
    flags+=("--ssh-config=")
    two_word_flags+=("--ssh-config")
    two_word_flags+=("-U")
    flags+=("--user-config=")
    two_word_flags+=("--user-config")
    two_word_flags+=("-u")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_sake_describe_targets()
{
    last_command="sake_describe_targets"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--edit")
    flags+=("-e")
    local_nonpersistent_flags+=("--edit")
    local_nonpersistent_flags+=("-e")
    flags+=("--config=")
    two_word_flags+=("--config")
    two_word_flags+=("-c")
    flags+=("--no-color")
    flags+=("--ssh-config=")
    two_word_flags+=("--ssh-config")
    two_word_flags+=("-U")
    flags+=("--user-config=")
    two_word_flags+=("--user-config")
    two_word_flags+=("-u")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_sake_describe_tasks()
{
    last_command="sake_describe_tasks"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--edit")
    flags+=("-e")
    local_nonpersistent_flags+=("--edit")
    local_nonpersistent_flags+=("-e")
    flags+=("--config=")
    two_word_flags+=("--config")
    two_word_flags+=("-c")
    flags+=("--no-color")
    flags+=("--ssh-config=")
    two_word_flags+=("--ssh-config")
    two_word_flags+=("-U")
    flags+=("--user-config=")
    two_word_flags+=("--user-config")
    two_word_flags+=("-u")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_sake_describe()
{
    last_command="sake_describe"

    command_aliases=()

    commands=()
    commands+=("servers")
    if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
        command_aliases+=("serv")
        aliashash["serv"]="servers"
        command_aliases+=("server")
        aliashash["server"]="servers"
        command_aliases+=("sv")
        aliashash["sv"]="servers"
    fi
    commands+=("specs")
    if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
        command_aliases+=("spec")
        aliashash["spec"]="specs"
    fi
    commands+=("targets")
    if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
        command_aliases+=("target")
        aliashash["target"]="targets"
    fi
    commands+=("tasks")
    if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
        command_aliases+=("task")
        aliashash["task"]="tasks"
        command_aliases+=("tsk")
        aliashash["tsk"]="tasks"
    fi

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--config=")
    two_word_flags+=("--config")
    two_word_flags+=("-c")
    flags+=("--no-color")
    flags+=("--ssh-config=")
    two_word_flags+=("--ssh-config")
    two_word_flags+=("-U")
    flags+=("--user-config=")
    two_word_flags+=("--user-config")
    two_word_flags+=("-u")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_sake_edit_server()
{
    last_command="sake_edit_server"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--config=")
    two_word_flags+=("--config")
    two_word_flags+=("-c")
    flags+=("--no-color")
    flags+=("--ssh-config=")
    two_word_flags+=("--ssh-config")
    two_word_flags+=("-U")
    flags+=("--user-config=")
    two_word_flags+=("--user-config")
    two_word_flags+=("-u")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_sake_edit_spec()
{
    last_command="sake_edit_spec"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--config=")
    two_word_flags+=("--config")
    two_word_flags+=("-c")
    flags+=("--no-color")
    flags+=("--ssh-config=")
    two_word_flags+=("--ssh-config")
    two_word_flags+=("-U")
    flags+=("--user-config=")
    two_word_flags+=("--user-config")
    two_word_flags+=("-u")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_sake_edit_target()
{
    last_command="sake_edit_target"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--config=")
    two_word_flags+=("--config")
    two_word_flags+=("-c")
    flags+=("--no-color")
    flags+=("--ssh-config=")
    two_word_flags+=("--ssh-config")
    two_word_flags+=("-U")
    flags+=("--user-config=")
    two_word_flags+=("--user-config")
    two_word_flags+=("-u")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_sake_edit_task()
{
    last_command="sake_edit_task"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--config=")
    two_word_flags+=("--config")
    two_word_flags+=("-c")
    flags+=("--no-color")
    flags+=("--ssh-config=")
    two_word_flags+=("--ssh-config")
    two_word_flags+=("-U")
    flags+=("--user-config=")
    two_word_flags+=("--user-config")
    two_word_flags+=("-u")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_sake_edit()
{
    last_command="sake_edit"

    command_aliases=()

    commands=()
    commands+=("server")
    if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
        command_aliases+=("serv")
        aliashash["serv"]="server"
        command_aliases+=("servers")
        aliashash["servers"]="server"
    fi
    commands+=("spec")
    if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
        command_aliases+=("sp")
        aliashash["sp"]="spec"
        command_aliases+=("specs")
        aliashash["specs"]="spec"
    fi
    commands+=("target")
    if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
        command_aliases+=("targ")
        aliashash["targ"]="target"
        command_aliases+=("targets")
        aliashash["targets"]="target"
    fi
    commands+=("task")
    if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
        command_aliases+=("tasks")
        aliashash["tasks"]="task"
        command_aliases+=("tsk")
        aliashash["tsk"]="task"
    fi

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--config=")
    two_word_flags+=("--config")
    two_word_flags+=("-c")
    flags+=("--no-color")
    flags+=("--ssh-config=")
    two_word_flags+=("--ssh-config")
    two_word_flags+=("-U")
    flags+=("--user-config=")
    two_word_flags+=("--user-config")
    two_word_flags+=("-u")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_sake_exec()
{
    last_command="sake_exec"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all")
    flags+=("-a")
    local_nonpersistent_flags+=("--all")
    local_nonpersistent_flags+=("-a")
    flags+=("--any-errors-fatal")
    local_nonpersistent_flags+=("--any-errors-fatal")
    flags+=("--attach")
    local_nonpersistent_flags+=("--attach")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--identity-file=")
    two_word_flags+=("--identity-file")
    two_word_flags+=("-i")
    local_nonpersistent_flags+=("--identity-file")
    local_nonpersistent_flags+=("--identity-file=")
    local_nonpersistent_flags+=("-i")
    flags+=("--ignore-errors")
    local_nonpersistent_flags+=("--ignore-errors")
    flags+=("--ignore-unreachable")
    local_nonpersistent_flags+=("--ignore-unreachable")
    flags+=("--invert")
    flags+=("-v")
    local_nonpersistent_flags+=("--invert")
    local_nonpersistent_flags+=("-v")
    flags+=("--known-hosts-file=")
    two_word_flags+=("--known-hosts-file")
    local_nonpersistent_flags+=("--known-hosts-file")
    local_nonpersistent_flags+=("--known-hosts-file=")
    flags+=("--limit=")
    two_word_flags+=("--limit")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--limit")
    local_nonpersistent_flags+=("--limit=")
    local_nonpersistent_flags+=("-l")
    flags+=("--limit-p=")
    two_word_flags+=("--limit-p")
    two_word_flags+=("-L")
    local_nonpersistent_flags+=("--limit-p")
    local_nonpersistent_flags+=("--limit-p=")
    local_nonpersistent_flags+=("-L")
    flags+=("--local")
    local_nonpersistent_flags+=("--local")
    flags+=("--omit-empty")
    local_nonpersistent_flags+=("--omit-empty")
    flags+=("--output=")
    two_word_flags+=("--output")
    flags_with_completion+=("--output")
    flags_completion+=("__sake_handle_go_custom_completion")
    two_word_flags+=("-o")
    flags_with_completion+=("-o")
    flags_completion+=("__sake_handle_go_custom_completion")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--parallel")
    flags+=("-p")
    local_nonpersistent_flags+=("--parallel")
    local_nonpersistent_flags+=("-p")
    flags+=("--password=")
    two_word_flags+=("--password")
    local_nonpersistent_flags+=("--password")
    local_nonpersistent_flags+=("--password=")
    flags+=("--regex=")
    two_word_flags+=("--regex")
    two_word_flags+=("-r")
    local_nonpersistent_flags+=("--regex")
    local_nonpersistent_flags+=("--regex=")
    local_nonpersistent_flags+=("-r")
    flags+=("--servers=")
    two_word_flags+=("--servers")
    flags_with_completion+=("--servers")
    flags_completion+=("__sake_handle_go_custom_completion")
    two_word_flags+=("-s")
    flags_with_completion+=("-s")
    flags_completion+=("__sake_handle_go_custom_completion")
    local_nonpersistent_flags+=("--servers")
    local_nonpersistent_flags+=("--servers=")
    local_nonpersistent_flags+=("-s")
    flags+=("--silent")
    flags+=("-S")
    local_nonpersistent_flags+=("--silent")
    local_nonpersistent_flags+=("-S")
    flags+=("--tags=")
    two_word_flags+=("--tags")
    flags_with_completion+=("--tags")
    flags_completion+=("__sake_handle_go_custom_completion")
    two_word_flags+=("-t")
    flags_with_completion+=("-t")
    flags_completion+=("__sake_handle_go_custom_completion")
    local_nonpersistent_flags+=("--tags")
    local_nonpersistent_flags+=("--tags=")
    local_nonpersistent_flags+=("-t")
    flags+=("--theme=")
    two_word_flags+=("--theme")
    flags_with_completion+=("--theme")
    flags_completion+=("__sake_handle_go_custom_completion")
    flags+=("--tty")
    local_nonpersistent_flags+=("--tty")
    flags+=("--config=")
    two_word_flags+=("--config")
    two_word_flags+=("-c")
    flags+=("--no-color")
    flags+=("--ssh-config=")
    two_word_flags+=("--ssh-config")
    two_word_flags+=("-U")
    flags+=("--user-config=")
    two_word_flags+=("--user-config")
    two_word_flags+=("-u")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_sake_gen()
{
    last_command="sake_gen"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--dir=")
    two_word_flags+=("--dir")
    flags_with_completion+=("--dir")
    flags_completion+=("__sake_handle_go_custom_completion")
    two_word_flags+=("-d")
    flags_with_completion+=("-d")
    flags_completion+=("__sake_handle_go_custom_completion")
    local_nonpersistent_flags+=("--dir")
    local_nonpersistent_flags+=("--dir=")
    local_nonpersistent_flags+=("-d")
    flags+=("--config=")
    two_word_flags+=("--config")
    two_word_flags+=("-c")
    flags+=("--no-color")
    flags+=("--ssh-config=")
    two_word_flags+=("--ssh-config")
    two_word_flags+=("-U")
    flags+=("--user-config=")
    two_word_flags+=("--user-config")
    two_word_flags+=("-u")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_sake_help()
{
    last_command="sake_help"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--config=")
    two_word_flags+=("--config")
    two_word_flags+=("-c")
    flags+=("--no-color")
    flags+=("--ssh-config=")
    two_word_flags+=("--ssh-config")
    two_word_flags+=("-U")
    flags+=("--user-config=")
    two_word_flags+=("--user-config")
    two_word_flags+=("-u")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_sake_init()
{
    last_command="sake_init"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--config=")
    two_word_flags+=("--config")
    two_word_flags+=("-c")
    flags+=("--no-color")
    flags+=("--ssh-config=")
    two_word_flags+=("--ssh-config")
    two_word_flags+=("-U")
    flags+=("--user-config=")
    two_word_flags+=("--user-config")
    two_word_flags+=("-u")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_sake_list_servers()
{
    last_command="sake_list_servers"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all-headers")
    flags+=("-H")
    local_nonpersistent_flags+=("--all-headers")
    local_nonpersistent_flags+=("-H")
    flags+=("--headers=")
    two_word_flags+=("--headers")
    flags_with_completion+=("--headers")
    flags_completion+=("__sake_handle_go_custom_completion")
    local_nonpersistent_flags+=("--headers")
    local_nonpersistent_flags+=("--headers=")
    flags+=("--invert")
    flags+=("-v")
    local_nonpersistent_flags+=("--invert")
    local_nonpersistent_flags+=("-v")
    flags+=("--regex=")
    two_word_flags+=("--regex")
    two_word_flags+=("-r")
    local_nonpersistent_flags+=("--regex")
    local_nonpersistent_flags+=("--regex=")
    local_nonpersistent_flags+=("-r")
    flags+=("--tags=")
    two_word_flags+=("--tags")
    flags_with_completion+=("--tags")
    flags_completion+=("__sake_handle_go_custom_completion")
    two_word_flags+=("-t")
    flags_with_completion+=("-t")
    flags_completion+=("__sake_handle_go_custom_completion")
    local_nonpersistent_flags+=("--tags")
    local_nonpersistent_flags+=("--tags=")
    local_nonpersistent_flags+=("-t")
    flags+=("--config=")
    two_word_flags+=("--config")
    two_word_flags+=("-c")
    flags+=("--no-color")
    flags+=("--output=")
    two_word_flags+=("--output")
    flags_with_completion+=("--output")
    flags_completion+=("__sake_handle_go_custom_completion")
    two_word_flags+=("-o")
    flags_with_completion+=("-o")
    flags_completion+=("__sake_handle_go_custom_completion")
    flags+=("--ssh-config=")
    two_word_flags+=("--ssh-config")
    two_word_flags+=("-U")
    flags+=("--theme=")
    two_word_flags+=("--theme")
    flags_with_completion+=("--theme")
    flags_completion+=("__sake_handle_go_custom_completion")
    flags+=("--user-config=")
    two_word_flags+=("--user-config")
    two_word_flags+=("-u")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_sake_list_specs()
{
    last_command="sake_list_specs"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--headers=")
    two_word_flags+=("--headers")
    flags_with_completion+=("--headers")
    flags_completion+=("__sake_handle_go_custom_completion")
    local_nonpersistent_flags+=("--headers")
    local_nonpersistent_flags+=("--headers=")
    flags+=("--config=")
    two_word_flags+=("--config")
    two_word_flags+=("-c")
    flags+=("--no-color")
    flags+=("--output=")
    two_word_flags+=("--output")
    flags_with_completion+=("--output")
    flags_completion+=("__sake_handle_go_custom_completion")
    two_word_flags+=("-o")
    flags_with_completion+=("-o")
    flags_completion+=("__sake_handle_go_custom_completion")
    flags+=("--ssh-config=")
    two_word_flags+=("--ssh-config")
    two_word_flags+=("-U")
    flags+=("--theme=")
    two_word_flags+=("--theme")
    flags_with_completion+=("--theme")
    flags_completion+=("__sake_handle_go_custom_completion")
    flags+=("--user-config=")
    two_word_flags+=("--user-config")
    two_word_flags+=("-u")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_sake_list_tags()
{
    last_command="sake_list_tags"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--headers=")
    two_word_flags+=("--headers")
    flags_with_completion+=("--headers")
    flags_completion+=("__sake_handle_go_custom_completion")
    local_nonpersistent_flags+=("--headers")
    local_nonpersistent_flags+=("--headers=")
    flags+=("--config=")
    two_word_flags+=("--config")
    two_word_flags+=("-c")
    flags+=("--no-color")
    flags+=("--output=")
    two_word_flags+=("--output")
    flags_with_completion+=("--output")
    flags_completion+=("__sake_handle_go_custom_completion")
    two_word_flags+=("-o")
    flags_with_completion+=("-o")
    flags_completion+=("__sake_handle_go_custom_completion")
    flags+=("--ssh-config=")
    two_word_flags+=("--ssh-config")
    two_word_flags+=("-U")
    flags+=("--theme=")
    two_word_flags+=("--theme")
    flags_with_completion+=("--theme")
    flags_completion+=("__sake_handle_go_custom_completion")
    flags+=("--user-config=")
    two_word_flags+=("--user-config")
    two_word_flags+=("-u")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_sake_list_targets()
{
    last_command="sake_list_targets"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--headers=")
    two_word_flags+=("--headers")
    flags_with_completion+=("--headers")
    flags_completion+=("__sake_handle_go_custom_completion")
    local_nonpersistent_flags+=("--headers")
    local_nonpersistent_flags+=("--headers=")
    flags+=("--config=")
    two_word_flags+=("--config")
    two_word_flags+=("-c")
    flags+=("--no-color")
    flags+=("--output=")
    two_word_flags+=("--output")
    flags_with_completion+=("--output")
    flags_completion+=("__sake_handle_go_custom_completion")
    two_word_flags+=("-o")
    flags_with_completion+=("-o")
    flags_completion+=("__sake_handle_go_custom_completion")
    flags+=("--ssh-config=")
    two_word_flags+=("--ssh-config")
    two_word_flags+=("-U")
    flags+=("--theme=")
    two_word_flags+=("--theme")
    flags_with_completion+=("--theme")
    flags_completion+=("__sake_handle_go_custom_completion")
    flags+=("--user-config=")
    two_word_flags+=("--user-config")
    two_word_flags+=("-u")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_sake_list_tasks()
{
    last_command="sake_list_tasks"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all-headers")
    flags+=("-H")
    local_nonpersistent_flags+=("--all-headers")
    local_nonpersistent_flags+=("-H")
    flags+=("--headers=")
    two_word_flags+=("--headers")
    flags_with_completion+=("--headers")
    flags_completion+=("__sake_handle_go_custom_completion")
    local_nonpersistent_flags+=("--headers")
    local_nonpersistent_flags+=("--headers=")
    flags+=("--config=")
    two_word_flags+=("--config")
    two_word_flags+=("-c")
    flags+=("--no-color")
    flags+=("--output=")
    two_word_flags+=("--output")
    flags_with_completion+=("--output")
    flags_completion+=("__sake_handle_go_custom_completion")
    two_word_flags+=("-o")
    flags_with_completion+=("-o")
    flags_completion+=("__sake_handle_go_custom_completion")
    flags+=("--ssh-config=")
    two_word_flags+=("--ssh-config")
    two_word_flags+=("-U")
    flags+=("--theme=")
    two_word_flags+=("--theme")
    flags_with_completion+=("--theme")
    flags_completion+=("__sake_handle_go_custom_completion")
    flags+=("--user-config=")
    two_word_flags+=("--user-config")
    two_word_flags+=("-u")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_sake_list()
{
    last_command="sake_list"

    command_aliases=()

    commands=()
    commands+=("servers")
    if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
        command_aliases+=("s")
        aliashash["s"]="servers"
        command_aliases+=("serv")
        aliashash["serv"]="servers"
        command_aliases+=("server")
        aliashash["server"]="servers"
    fi
    commands+=("specs")
    if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
        command_aliases+=("spec")
        aliashash["spec"]="specs"
    fi
    commands+=("tags")
    if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
        command_aliases+=("tag")
        aliashash["tag"]="tags"
    fi
    commands+=("targets")
    if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
        command_aliases+=("target")
        aliashash["target"]="targets"
    fi
    commands+=("tasks")
    if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
        command_aliases+=("task")
        aliashash["task"]="tasks"
        command_aliases+=("tsk")
        aliashash["tsk"]="tasks"
        command_aliases+=("tsks")
        aliashash["tsks"]="tasks"
    fi

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--output=")
    two_word_flags+=("--output")
    flags_with_completion+=("--output")
    flags_completion+=("__sake_handle_go_custom_completion")
    two_word_flags+=("-o")
    flags_with_completion+=("-o")
    flags_completion+=("__sake_handle_go_custom_completion")
    flags+=("--theme=")
    two_word_flags+=("--theme")
    flags_with_completion+=("--theme")
    flags_completion+=("__sake_handle_go_custom_completion")
    flags+=("--config=")
    two_word_flags+=("--config")
    two_word_flags+=("-c")
    flags+=("--no-color")
    flags+=("--ssh-config=")
    two_word_flags+=("--ssh-config")
    two_word_flags+=("-U")
    flags+=("--user-config=")
    two_word_flags+=("--user-config")
    two_word_flags+=("-u")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

_sake_run()
{
    last_command="sake_run"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--all")
    flags+=("-a")
    local_nonpersistent_flags+=("--all")
    local_nonpersistent_flags+=("-a")
    flags+=("--any-errors-fatal")
    local_nonpersistent_flags+=("--any-errors-fatal")
    flags+=("--attach")
    local_nonpersistent_flags+=("--attach")
    flags+=("--describe")
    local_nonpersistent_flags+=("--describe")
    flags+=("--dry-run")
    local_nonpersistent_flags+=("--dry-run")
    flags+=("--edit")
    flags+=("-e")
    local_nonpersistent_flags+=("--edit")
    local_nonpersistent_flags+=("-e")
    flags+=("--identity-file=")
    two_word_flags+=("--identity-file")
    two_word_flags+=("-i")
    local_nonpersistent_flags+=("--identity-file")
    local_nonpersistent_flags+=("--identity-file=")
    local_nonpersistent_flags+=("-i")
    flags+=("--ignore-errors")
    local_nonpersistent_flags+=("--ignore-errors")
    flags+=("--ignore-unreachable")
    local_nonpersistent_flags+=("--ignore-unreachable")
    flags+=("--invert")
    flags+=("-v")
    local_nonpersistent_flags+=("--invert")
    local_nonpersistent_flags+=("-v")
    flags+=("--known-hosts-file=")
    two_word_flags+=("--known-hosts-file")
    local_nonpersistent_flags+=("--known-hosts-file")
    local_nonpersistent_flags+=("--known-hosts-file=")
    flags+=("--limit=")
    two_word_flags+=("--limit")
    two_word_flags+=("-l")
    local_nonpersistent_flags+=("--limit")
    local_nonpersistent_flags+=("--limit=")
    local_nonpersistent_flags+=("-l")
    flags+=("--limit-p=")
    two_word_flags+=("--limit-p")
    two_word_flags+=("-L")
    local_nonpersistent_flags+=("--limit-p")
    local_nonpersistent_flags+=("--limit-p=")
    local_nonpersistent_flags+=("-L")
    flags+=("--local")
    local_nonpersistent_flags+=("--local")
    flags+=("--omit-empty")
    local_nonpersistent_flags+=("--omit-empty")
    flags+=("--output=")
    two_word_flags+=("--output")
    flags_with_completion+=("--output")
    flags_completion+=("__sake_handle_go_custom_completion")
    two_word_flags+=("-o")
    flags_with_completion+=("-o")
    flags_completion+=("__sake_handle_go_custom_completion")
    local_nonpersistent_flags+=("--output")
    local_nonpersistent_flags+=("--output=")
    local_nonpersistent_flags+=("-o")
    flags+=("--parallel")
    flags+=("-p")
    local_nonpersistent_flags+=("--parallel")
    local_nonpersistent_flags+=("-p")
    flags+=("--password=")
    two_word_flags+=("--password")
    local_nonpersistent_flags+=("--password")
    local_nonpersistent_flags+=("--password=")
    flags+=("--regex=")
    two_word_flags+=("--regex")
    two_word_flags+=("-r")
    local_nonpersistent_flags+=("--regex")
    local_nonpersistent_flags+=("--regex=")
    local_nonpersistent_flags+=("-r")
    flags+=("--servers=")
    two_word_flags+=("--servers")
    flags_with_completion+=("--servers")
    flags_completion+=("__sake_handle_go_custom_completion")
    two_word_flags+=("-s")
    flags_with_completion+=("-s")
    flags_completion+=("__sake_handle_go_custom_completion")
    local_nonpersistent_flags+=("--servers")
    local_nonpersistent_flags+=("--servers=")
    local_nonpersistent_flags+=("-s")
    flags+=("--silent")
    flags+=("-S")
    local_nonpersistent_flags+=("--silent")
    local_nonpersistent_flags+=("-S")
    flags+=("--tags=")
    two_word_flags+=("--tags")
    flags_with_completion+=("--tags")
    flags_completion+=("__sake_handle_go_custom_completion")
    two_word_flags+=("-t")
    flags_with_completion+=("-t")
    flags_completion+=("__sake_handle_go_custom_completion")
    local_nonpersistent_flags+=("--tags")
    local_nonpersistent_flags+=("--tags=")
    local_nonpersistent_flags+=("-t")
    flags+=("--theme=")
    two_word_flags+=("--theme")
    flags_with_completion+=("--theme")
    flags_completion+=("__sake_handle_go_custom_completion")
    flags+=("--tty")
    local_nonpersistent_flags+=("--tty")
    flags+=("--config=")
    two_word_flags+=("--config")
    two_word_flags+=("-c")
    flags+=("--no-color")
    flags+=("--ssh-config=")
    two_word_flags+=("--ssh-config")
    two_word_flags+=("-U")
    flags+=("--user-config=")
    two_word_flags+=("--user-config")
    two_word_flags+=("-u")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_sake_ssh()
{
    last_command="sake_ssh"

    command_aliases=()

    commands=()

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--identity-file=")
    two_word_flags+=("--identity-file")
    two_word_flags+=("-i")
    local_nonpersistent_flags+=("--identity-file")
    local_nonpersistent_flags+=("--identity-file=")
    local_nonpersistent_flags+=("-i")
    flags+=("--password=")
    two_word_flags+=("--password")
    local_nonpersistent_flags+=("--password")
    local_nonpersistent_flags+=("--password=")
    flags+=("--config=")
    two_word_flags+=("--config")
    two_word_flags+=("-c")
    flags+=("--no-color")
    flags+=("--ssh-config=")
    two_word_flags+=("--ssh-config")
    two_word_flags+=("-U")
    flags+=("--user-config=")
    two_word_flags+=("--user-config")
    two_word_flags+=("-u")

    must_have_one_flag=()
    must_have_one_noun=()
    has_completion_function=1
    noun_aliases=()
}

_sake_root_command()
{
    last_command="sake"

    command_aliases=()

    commands=()
    commands+=("check")
    commands+=("completion")
    commands+=("describe")
    if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
        command_aliases+=("desc")
        aliashash["desc"]="describe"
    fi
    commands+=("edit")
    if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
        command_aliases+=("e")
        aliashash["e"]="edit"
        command_aliases+=("ed")
        aliashash["ed"]="edit"
    fi
    commands+=("exec")
    commands+=("gen")
    commands+=("help")
    commands+=("init")
    commands+=("list")
    if [[ -z "${BASH_VERSION:-}" || "${BASH_VERSINFO[0]:-}" -gt 3 ]]; then
        command_aliases+=("l")
        aliashash["l"]="list"
        command_aliases+=("ls")
        aliashash["ls"]="list"
    fi
    commands+=("run")
    commands+=("ssh")

    flags=()
    two_word_flags=()
    local_nonpersistent_flags=()
    flags_with_completion=()
    flags_completion=()

    flags+=("--config=")
    two_word_flags+=("--config")
    two_word_flags+=("-c")
    flags+=("--no-color")
    flags+=("--ssh-config=")
    two_word_flags+=("--ssh-config")
    two_word_flags+=("-U")
    flags+=("--user-config=")
    two_word_flags+=("--user-config")
    two_word_flags+=("-u")

    must_have_one_flag=()
    must_have_one_noun=()
    noun_aliases=()
}

__start_sake()
{
    local cur prev words cword split
    declare -A flaghash 2>/dev/null || :
    declare -A aliashash 2>/dev/null || :
    if declare -F _init_completion >/dev/null 2>&1; then
        _init_completion -s || return
    else
        __sake_init_completion -n "=" || return
    fi

    local c=0
    local flag_parsing_disabled=
    local flags=()
    local two_word_flags=()
    local local_nonpersistent_flags=()
    local flags_with_completion=()
    local flags_completion=()
    local commands=("sake")
    local command_aliases=()
    local must_have_one_flag=()
    local must_have_one_noun=()
    local has_completion_function=""
    local last_command=""
    local nouns=()
    local noun_aliases=()

    __sake_handle_word
}

if [[ $(type -t compopt) = "builtin" ]]; then
    complete -o default -F __start_sake sake
else
    complete -o default -o nospace -F __start_sake sake
fi

# ex: ts=4 sw=4 et filetype=sh
